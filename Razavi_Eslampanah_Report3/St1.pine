// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © aliashahi

//@version=5
strategy(title="My Ichimoku Cloud Strategy", shorttitle="Ichimoku Strategy", overlay=true, pyramiding=3)

conversionPeriods   = input.int(9,  minval=1, title="Conversion Line Periods"),
basePeriods         = input.int(26, minval=1, title="Base Line Periods")
laggingSpan2Periods = input.int(52, minval=1, title="Lagging Span 2 Periods"),
displacement        = input.int(26, minval=1, title="Displacement")

usePSARTrailStop    = input.bool(true, title="Use Parabolic SAR for Trailing Stop")
psarStart           = input.float(0.02, title="Parabolic SAR Start")
psarIncrement       = input.float(0.02, title="Parabolic SAR Increment")
psarMaximum         = input.float(0.2,  title="Parabolic SAR Maximum")
///////** Time Inputs For Backtesting **//////////
useDateFilter = input.bool(true, title="Filter Date Range of Backtest",
     group="Backtest Time Period")
backtestStartDate = input.time(timestamp("1 Jan 2021"),
     title="Start Date", group="Backtest Time Period",
     tooltip="This start date is in the time zone of the exchange " +
     "where the chart's instrument trades. It doesn't use the time " +
     "zone of the chart or of your computer.")
backtestEndDate = input.time(timestamp("1 Jan 2022"),
     title="End Date", group="Backtest Time Period",
     tooltip="This end date is in the time zone of the exchange " +
     "where the chart's instrument trades. It doesn't use the time " +
     "zone of the chart or of your computer.")
inTradeWindow = not useDateFilter or (time >= backtestStartDate and time < backtestEndDate)
/////////////////////////////////////////////////
bezanBerim(in1) => math.avg(ta.lowest(in1), ta.highest(in1))
//conversionLine
con_line = bezanBerim(conversionPeriods)

//baseLine
base_line = bezanBerim(basePeriods)

//LeadingSpanA - 26
lead1 = math.avg(con_line, base_line)
//LeadingSpanB - 26
lead2 = bezanBerim(laggingSpan2Periods)

// ///////** Functions **///////
highest(in1) =>
    a = array.new_float(0,0)
    for i = 0 to in1
        array.push(a, high[i])
    a

lowest(in1) =>
    a = array.new_float(0,0)
    for i = 0 to in1
        array.push(a, nz(low[i],0))
    a
// ////////////////



// bezanBerim(in1) => array.avg(array.concat(lowest(in1) , highest(in1)))

// con_line = bezanBerim(conversionPeriods)
// base_line = bezanBerim(basePeriods)

// x= array.new_float(0,0)
// array.push(x,con_line)
// array.push(x,base_line)

// lead1 = array.avg(x)

// lead2 = bezanBerim(laggingSpan2Periods)

leadLineA = lead1[displacement]
leadLineB = lead2[displacement]

psar = ta.sar(psarStart, psarIncrement, psarMaximum)

//close > leadLineB : کندل ها بالای ابر هستن
//leadLineA > leadLineB : ابر سبز باشه
//ta.crossover(close, base_line) : کندل بیس لاین رو قطع کنه

BekharTime = close > leadLineB and leadLineA > leadLineB and ta.crossover(close, base_line) and (usePSARTrailStop ? close > psar : not usePSARTrailStop)

BefroushTime = close < leadLineA and leadLineA < leadLineB and ta.crossunder(close, base_line) and (usePSARTrailStop ? close < psar : not usePSARTrailStop)

longe  = strategy.position_size > 0
shorte = strategy.position_size < 0

if(inTradeWindow and BekharTime)
    strategy.entry("ichimoku-long", strategy.long)
if(inTradeWindow and BefroushTime)
    strategy.entry("ichimoku-short", strategy.short)

if(not inTradeWindow or (longe and usePSARTrailStop))
    strategy.close("ichimoku-long")
if(not inTradeWindow or (shorte and usePSARTrailStop))
    strategy.close("ichimoku-short")